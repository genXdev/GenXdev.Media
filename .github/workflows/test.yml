name: Run Unit Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup PowerShell modules
      shell: pwsh
      run: |
        Write-Host "Installing required modules..."

        # Install Pester if needed
        if (-not (Get-Module -ListAvailable -Name Pester)) {
          Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser
        }

        # Install PSScriptAnalyzer if needed
        if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
          Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -Scope CurrentUser
        }

    - name: Create PSScriptAnalyzer settings
      shell: pwsh
      run: |
        $settings = @'
        @{
            Severity              = @('Warning')
            IncludeRules          = @(
                'PSUseFullyQualifiedCmdletNames',
                'PSAvoidDefaultValueSwitchParameter',
                'PSAvoidUsingCmdletAliases',
                'PSAvoidAssignmentToAutomaticVariable',
                'PSAvoidDefaultValueForMandatoryParameter',
                'PSAvoidExclaimOperator',
                'PSAvoidGlobalAliases',
                'PSAvoidGlobalFunctions',
                'PSAvoidGlobalVars',
                'PSAvoidLongLines',
                'PSAvoidNullOrEmptyHelpMessageAttribute',
                'PSAvoidOverwritingBuiltInCmdlets',
                'PSReservedCmdletChar',
                'PSReservedParams',
                'PSAvoidSemicolonsAsLineTerminators',
                'PSAvoidShouldContinueWithoutForce',
                'PSAvoidTrailingWhitespace',
                'PSAvoidUsingDeprecatedManifestFields',
                'PSAvoidUsingDoubleQuotesForConstantString',
                'PSMisleadingBacktick',
                'PSMissingModuleManifestField',
                'PSPlaceOpenBrace',
                'PSPossibleIncorrectComparisonWithNull',
                'PSPossibleIncorrectUsageOfAssignmentOperator',
                'PSPossibleIncorrectUsageOfRedirectionOperator',
                'PSUseApprovedVerbs',
                'PSUseCmdletCorrectly',
                'PSUseCompatibleCmdlets',
                'PSUseConsistentIndentation',
                'PSUseConsistentWhitespace',
                'PSUseDeclaredVarsMoreThanAssignments',
                'PSUseLiteralInitializerForHashtable',
                'PSUseOutputTypeCorrectly',
                'PSUseProcessBlockForPipelineCommand',
                'PSShouldProcess',
                'PSUseShouldProcessForStateChangingFunctions',
                'PSUseSingularNouns',
                'PSUseSupportsShouldProcess',
                'PSUseToExportFieldsInManifest',
                'PSUseUsingScopeModifierInNewRunspaces'
            )
            ExcludeRules          = @(
                'PSUseCorrectCasing',
                'PSUseCompatibleCommands',
                'PSAlignAssignmentStatement',
                'PSAvoidUsingEmptyCatchBlock',
                'PSReviewUnusedParameter',
                'PSAvoidInvokingEmptyMembers',
                'PSAvoidMultipleTypeAttributes',
                'PSAvoidUsingPositionalParameters',
                'PSUseBOMForUnicodeEncodedFile',
                'PSAvoidUsingUsernameAndPasswordParams',
                'PSAvoidUsingAllowUnencryptedAuthentication',
                'PSAvoidUsingBrokenHashAlgorithms',
                'PSAvoidUsingComputerNameHardcoded',
                'PSAvoidUsingConvertToSecureStringWithPlainText',
                'PSAvoidUsingInvokeExpression',
                'PSAvoidUsingPlainTextForPassword',
                'PSAvoidUsingWMICmdlet',
                'PSAvoidUsingWriteHost',
                'PSUseCompatibleSyntax',
                'PSUseCompatibleTypes',
                'PSPlaceCloseBrace',
                'PSProvideCommentHelp',
                'PSUsePSCredentialType',
                'PSUseUTF8EncodingForHelpFile',
                'PSDSCDscExamplesPresent',
                'PSDSCDscTestsPresent',
                'PSDSCReturnCorrectTypesForDSCFunctions',
                'PSDSCUseIdenticalMandatoryParametersForDSC',
                'PSDSCUseIdenticalParametersForDSC',
                'PSDSCStandardDSCFunctionsInResource',
                'PSDSCUseVerboseMessageInDSCResource'
            )
            IncludeDefaultRules   = $true
            RecurseCustomRulePath = $false
            Rules = @{
                PSUseFullyQualifiedCmdletNames = @{
                    Enabled  = $true
                }
            }
        }
        '@
        $settings | Out-File -FilePath "${{ github.workspace }}/PSScriptAnalyzerSettings.psd1" -Encoding UTF8

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Cyan

        # Find all .ps1 and .psm1 files in Functions directory
        $scriptFiles = Get-ChildItem -Path "${{ github.workspace }}/Functions" -Filter "*.ps1" -Recurse -ErrorAction SilentlyContinue
        $moduleFiles = Get-ChildItem -Path "${{ github.workspace }}" -Filter "*.psm1" -Recurse -ErrorAction SilentlyContinue

        $allFiles = @($scriptFiles) + @($moduleFiles)
        $issuesFound = $false
        $settingsPath = "${{ github.workspace }}/PSScriptAnalyzerSettings.psd1"

        foreach ($file in $allFiles) {
          Write-Host "`nAnalyzing: $($file.FullName)" -ForegroundColor Yellow
          $results = Invoke-ScriptAnalyzer -Path $file.FullName -Settings $settingsPath

          if ($results) {
            $issuesFound = $true
            $results | Format-Table -AutoSize -Property Severity, Line, RuleName, Message
          }
        }

        if ($issuesFound) {
          Write-Error "PSScriptAnalyzer found issues!"
          exit 1
        }

        Write-Host "`n✓ PSScriptAnalyzer passed!" -ForegroundColor Green

    - name: Run Pester tests
      shell: pwsh
      run: |
        Write-Host "Running Pester tests..." -ForegroundColor Cyan

        # Check if Tests directory exists
        $testsPath = "${{ github.workspace }}/Tests"
        if (-not (Test-Path $testsPath)) {
          Write-Host "No Tests directory found, skipping Pester tests" -ForegroundColor Yellow
          exit 0
        }

        # Configure Pester
        $config = New-PesterConfiguration
        $config.Run.Path = $testsPath
        $config.Run.PassThru = $true
        $config.Output.Verbosity = 'Detailed'
        $config.TestResult.Enabled = $false

        # Run tests
        $result = Invoke-Pester -Configuration $config

        # Check results
        if ($result.FailedCount -gt 0) {
          Write-Error "Pester tests failed: $($result.FailedCount) test(s) failed"
          exit 1
        }

        Write-Host "`n✓ All Pester tests passed! ($($result.PassedCount) tests)" -ForegroundColor Green
